LAMMPS (22 Jul 2025 - Update 1)
# LAMMPS: Final Correct Configuration
# Target: frequency ~0.06 Hz (matching your C simulation)
# Wall: vertical line of particles, x-motion only
# Particles: exactly 50 left + 50 right

units           lj
dimension       2
atom_style      molecular
atom_modify     map yes
boundary        f f p

neighbor        0.5 bin
neigh_modify    delay 0 every 1 check yes

# Increase communication cutoff for rigid body
comm_modify     cutoff 6.0

# ============================================================================
# PARAMETERS TO MATCH YOUR C CODE
# ============================================================================

variable        L0 equal 7.5            # SMALLER box → freq ~0.06 Hz (was 10)
variable        H equal 10.0
variable        T equal 1.0             # T=1 as you requested
variable        dt equal 0.00005        # Smaller dt for stability at T=1

variable        pmass equal 1.0
variable        sigma equal 1.0
variable        K_B equal 1.0
variable        wall_particle_mass equal 1.0
variable        num_wall_particles equal 20
variable        M_total equal 20.0      # LIGHTER wall → freq ~0.06 Hz (was 200)

# For frequency ~0.06: need smaller L0 and lighter wall
# freq ∝ sqrt(pressure/(wall_mass * L0))

variable        hold_steps equal 100000   # 5 time units
variable        run_steps equal 6000000   # 300 time units
variable        thermo_freq equal 10000
variable        dump_freq equal 10000

# ============================================================================
# CREATE BOX
# ============================================================================

region          box block -${L0} ${L0} -$(v_H/2) $(v_H/2) -0.5 0.5
region          box block -7.5 ${L0} -$(v_H/2) $(v_H/2) -0.5 0.5
region          box block -7.5 7.5 -$(v_H/2) $(v_H/2) -0.5 0.5
region          box block -7.5 7.5 -5 $(v_H/2) -0.5 0.5
region          box block -7.5 7.5 -5 5 -0.5 0.5
create_box      2 box
Created orthogonal box = (-7.5 -5 -0.5) to (7.5 5 0.5)
  1 by 1 by 1 MPI processor grid

# ============================================================================
# CREATE EXACTLY 50+50 PARTICLES
# ============================================================================

# Use lattice for approximately 50 per side
lattice         sq 1.05
Lattice spacing in x,y,z = 0.97590007 0.97590007 0.97590007

region          left_fill block -$(v_L0-0.5) -0.6 -$(v_H/2-0.5) $(v_H/2-0.5) -0.5 0.5
region          left_fill block -7 -0.6 -$(v_H/2-0.5) $(v_H/2-0.5) -0.5 0.5
region          left_fill block -7 -0.6 -4.5 $(v_H/2-0.5) -0.5 0.5
region          left_fill block -7 -0.6 -4.5 4.5 -0.5 0.5
create_atoms    1 region left_fill
Created 63 atoms
  using lattice units in orthogonal box = (-7.5 -5 -0.5) to (7.5 5 0.5)
  create_atoms CPU = 0.000 seconds

variable        n_left_initial equal count(all)

region          right_fill block 0.6 $(v_L0-0.5) -$(v_H/2-0.5) $(v_H/2-0.5) -0.5 0.5
region          right_fill block 0.6 7 -$(v_H/2-0.5) $(v_H/2-0.5) -0.5 0.5
region          right_fill block 0.6 7 -4.5 $(v_H/2-0.5) -0.5 0.5
region          right_fill block 0.6 7 -4.5 4.5 -0.5 0.5
create_atoms    1 region right_fill
Created 63 atoms
  using lattice units in orthogonal box = (-7.5 -5 -0.5) to (7.5 5 0.5)
  create_atoms CPU = 0.000 seconds

variable        n_total equal count(all)
print           "Created $(count(all)) gas particles"
Created 126 gas particles

# Adjust to exactly 100
if              "${n_total} > 100" then     "group extras id > 100"     "delete_atoms group extras"     "print 'Trimmed to 100 particles'"
group extras id > 100
26 atoms in group extras
delete_atoms group extras
WARNING: Ignoring 'compress yes' for molecular system (src/delete_atoms.cpp:141)
Deleted 26 atoms, new total = 100
print 'Trimmed to 100 particles'
Trimmed to 100 particles

set             type 1 mol 0
Setting atom values ...
  100 settings made for mol
mass            1 ${pmass}
mass            1 1
group           particles type 1
100 atoms in group particles

# ============================================================================
# CREATE WALL LINE (20 particles forming vertical line)
# ============================================================================

variable        dy_wall equal ${H}/${num_wall_particles}
variable        dy_wall equal 10/${num_wall_particles}
variable        dy_wall equal 10/20
variable        y_start equal -$(v_H/2)+v_dy_wall/2
variable        y_start equal -5+v_dy_wall/2

variable        iwall loop ${num_wall_particles}
variable        iwall loop 20
label           create_wall_loop
variable        y_pos equal v_y_start+(${iwall}-1)*v_dy_wall
variable        y_pos equal v_y_start+(1-1)*v_dy_wall
create_atoms    2 single 0.0 ${y_pos} 0.0
create_atoms    2 single 0.0 -4.75 0.0
Created 1 atoms
  using lattice units in orthogonal box = (-7.5 -5 -0.5) to (7.5 5 0.5)
  create_atoms CPU = 0.000 seconds
next            iwall
jump            SELF create_wall_loop
variable        y_pos equal v_y_start+(${iwall}-1)*v_dy_wall
variable        y_pos equal v_y_start+(2-1)*v_dy_wall
create_atoms    2 single 0.0 ${y_pos} 0.0
create_atoms    2 single 0.0 -4.25 0.0
Created 1 atoms
  using lattice units in orthogonal box = (-7.5 -5 -0.5) to (7.5 5 0.5)
  create_atoms CPU = 0.000 seconds
next            iwall
jump            SELF create_wall_loop
variable        y_pos equal v_y_start+(${iwall}-1)*v_dy_wall
variable        y_pos equal v_y_start+(3-1)*v_dy_wall
create_atoms    2 single 0.0 ${y_pos} 0.0
create_atoms    2 single 0.0 -3.75 0.0
Created 1 atoms
  using lattice units in orthogonal box = (-7.5 -5 -0.5) to (7.5 5 0.5)
  create_atoms CPU = 0.000 seconds
next            iwall
jump            SELF create_wall_loop
variable        y_pos equal v_y_start+(${iwall}-1)*v_dy_wall
variable        y_pos equal v_y_start+(4-1)*v_dy_wall
create_atoms    2 single 0.0 ${y_pos} 0.0
create_atoms    2 single 0.0 -3.25 0.0
Created 1 atoms
  using lattice units in orthogonal box = (-7.5 -5 -0.5) to (7.5 5 0.5)
  create_atoms CPU = 0.000 seconds
next            iwall
jump            SELF create_wall_loop
variable        y_pos equal v_y_start+(${iwall}-1)*v_dy_wall
variable        y_pos equal v_y_start+(5-1)*v_dy_wall
create_atoms    2 single 0.0 ${y_pos} 0.0
create_atoms    2 single 0.0 -2.75 0.0
Created 1 atoms
  using lattice units in orthogonal box = (-7.5 -5 -0.5) to (7.5 5 0.5)
  create_atoms CPU = 0.000 seconds
next            iwall
jump            SELF create_wall_loop
variable        y_pos equal v_y_start+(${iwall}-1)*v_dy_wall
variable        y_pos equal v_y_start+(6-1)*v_dy_wall
create_atoms    2 single 0.0 ${y_pos} 0.0
create_atoms    2 single 0.0 -2.25 0.0
Created 1 atoms
  using lattice units in orthogonal box = (-7.5 -5 -0.5) to (7.5 5 0.5)
  create_atoms CPU = 0.000 seconds
next            iwall
jump            SELF create_wall_loop
variable        y_pos equal v_y_start+(${iwall}-1)*v_dy_wall
variable        y_pos equal v_y_start+(7-1)*v_dy_wall
create_atoms    2 single 0.0 ${y_pos} 0.0
create_atoms    2 single 0.0 -1.75 0.0
Created 1 atoms
  using lattice units in orthogonal box = (-7.5 -5 -0.5) to (7.5 5 0.5)
  create_atoms CPU = 0.000 seconds
next            iwall
jump            SELF create_wall_loop
variable        y_pos equal v_y_start+(${iwall}-1)*v_dy_wall
variable        y_pos equal v_y_start+(8-1)*v_dy_wall
create_atoms    2 single 0.0 ${y_pos} 0.0
create_atoms    2 single 0.0 -1.25 0.0
Created 1 atoms
  using lattice units in orthogonal box = (-7.5 -5 -0.5) to (7.5 5 0.5)
  create_atoms CPU = 0.000 seconds
next            iwall
jump            SELF create_wall_loop
variable        y_pos equal v_y_start+(${iwall}-1)*v_dy_wall
variable        y_pos equal v_y_start+(9-1)*v_dy_wall
create_atoms    2 single 0.0 ${y_pos} 0.0
create_atoms    2 single 0.0 -0.75 0.0
Created 1 atoms
  using lattice units in orthogonal box = (-7.5 -5 -0.5) to (7.5 5 0.5)
  create_atoms CPU = 0.000 seconds
next            iwall
jump            SELF create_wall_loop
variable        y_pos equal v_y_start+(${iwall}-1)*v_dy_wall
variable        y_pos equal v_y_start+(10-1)*v_dy_wall
create_atoms    2 single 0.0 ${y_pos} 0.0
create_atoms    2 single 0.0 -0.25 0.0
Created 1 atoms
  using lattice units in orthogonal box = (-7.5 -5 -0.5) to (7.5 5 0.5)
  create_atoms CPU = 0.000 seconds
next            iwall
jump            SELF create_wall_loop
variable        y_pos equal v_y_start+(${iwall}-1)*v_dy_wall
variable        y_pos equal v_y_start+(11-1)*v_dy_wall
create_atoms    2 single 0.0 ${y_pos} 0.0
create_atoms    2 single 0.0 0.25 0.0
Created 1 atoms
  using lattice units in orthogonal box = (-7.5 -5 -0.5) to (7.5 5 0.5)
  create_atoms CPU = 0.000 seconds
next            iwall
jump            SELF create_wall_loop
variable        y_pos equal v_y_start+(${iwall}-1)*v_dy_wall
variable        y_pos equal v_y_start+(12-1)*v_dy_wall
create_atoms    2 single 0.0 ${y_pos} 0.0
create_atoms    2 single 0.0 0.75 0.0
Created 1 atoms
  using lattice units in orthogonal box = (-7.5 -5 -0.5) to (7.5 5 0.5)
  create_atoms CPU = 0.000 seconds
next            iwall
jump            SELF create_wall_loop
variable        y_pos equal v_y_start+(${iwall}-1)*v_dy_wall
variable        y_pos equal v_y_start+(13-1)*v_dy_wall
create_atoms    2 single 0.0 ${y_pos} 0.0
create_atoms    2 single 0.0 1.25 0.0
Created 1 atoms
  using lattice units in orthogonal box = (-7.5 -5 -0.5) to (7.5 5 0.5)
  create_atoms CPU = 0.000 seconds
next            iwall
jump            SELF create_wall_loop
variable        y_pos equal v_y_start+(${iwall}-1)*v_dy_wall
variable        y_pos equal v_y_start+(14-1)*v_dy_wall
create_atoms    2 single 0.0 ${y_pos} 0.0
create_atoms    2 single 0.0 1.75 0.0
Created 1 atoms
  using lattice units in orthogonal box = (-7.5 -5 -0.5) to (7.5 5 0.5)
  create_atoms CPU = 0.000 seconds
next            iwall
jump            SELF create_wall_loop
variable        y_pos equal v_y_start+(${iwall}-1)*v_dy_wall
variable        y_pos equal v_y_start+(15-1)*v_dy_wall
create_atoms    2 single 0.0 ${y_pos} 0.0
create_atoms    2 single 0.0 2.25 0.0
Created 1 atoms
  using lattice units in orthogonal box = (-7.5 -5 -0.5) to (7.5 5 0.5)
  create_atoms CPU = 0.000 seconds
next            iwall
jump            SELF create_wall_loop
variable        y_pos equal v_y_start+(${iwall}-1)*v_dy_wall
variable        y_pos equal v_y_start+(16-1)*v_dy_wall
create_atoms    2 single 0.0 ${y_pos} 0.0
create_atoms    2 single 0.0 2.75 0.0
Created 1 atoms
  using lattice units in orthogonal box = (-7.5 -5 -0.5) to (7.5 5 0.5)
  create_atoms CPU = 0.000 seconds
next            iwall
jump            SELF create_wall_loop
variable        y_pos equal v_y_start+(${iwall}-1)*v_dy_wall
variable        y_pos equal v_y_start+(17-1)*v_dy_wall
create_atoms    2 single 0.0 ${y_pos} 0.0
create_atoms    2 single 0.0 3.25 0.0
Created 1 atoms
  using lattice units in orthogonal box = (-7.5 -5 -0.5) to (7.5 5 0.5)
  create_atoms CPU = 0.000 seconds
next            iwall
jump            SELF create_wall_loop
variable        y_pos equal v_y_start+(${iwall}-1)*v_dy_wall
variable        y_pos equal v_y_start+(18-1)*v_dy_wall
create_atoms    2 single 0.0 ${y_pos} 0.0
create_atoms    2 single 0.0 3.75 0.0
Created 1 atoms
  using lattice units in orthogonal box = (-7.5 -5 -0.5) to (7.5 5 0.5)
  create_atoms CPU = 0.000 seconds
next            iwall
jump            SELF create_wall_loop
variable        y_pos equal v_y_start+(${iwall}-1)*v_dy_wall
variable        y_pos equal v_y_start+(19-1)*v_dy_wall
create_atoms    2 single 0.0 ${y_pos} 0.0
create_atoms    2 single 0.0 4.25 0.0
Created 1 atoms
  using lattice units in orthogonal box = (-7.5 -5 -0.5) to (7.5 5 0.5)
  create_atoms CPU = 0.000 seconds
next            iwall
jump            SELF create_wall_loop
variable        y_pos equal v_y_start+(${iwall}-1)*v_dy_wall
variable        y_pos equal v_y_start+(20-1)*v_dy_wall
create_atoms    2 single 0.0 ${y_pos} 0.0
create_atoms    2 single 0.0 4.75 0.0
Created 1 atoms
  using lattice units in orthogonal box = (-7.5 -5 -0.5) to (7.5 5 0.5)
  create_atoms CPU = 0.000 seconds
next            iwall
jump            SELF create_wall_loop

group           wall_atoms type 2
20 atoms in group wall_atoms
set             type 2 mol 1
Setting atom values ...
  20 settings made for mol
mass            2 ${wall_particle_mass}
mass            2 1

print           "SETUP: $(count(particles)) gas + $(count(wall_atoms)) wall = $(count(all)) total"
SETUP: 100 gas + 20 wall = 120 total

# ============================================================================
# RIGID WALL - X-MOTION ONLY
# ============================================================================

# Rigid body from molecule 1
fix             rigid_wall wall_atoms rigid/small molecule
Fix rigid/small setup ...
  create bodies CPU = 0.000 seconds
  1 rigid bodies with 20 atoms
  4.8795004 = max distance from body owner to body atom

# CRITICAL: Lock y-motion (wall can only move in x)
fix             wall_lock_y wall_atoms setforce NULL 0.0 0.0

# ============================================================================
# POTENTIALS
# ============================================================================

pair_style      lj/cut 1.122462
pair_modify     shift yes

# Softer for stability at T=1
pair_coeff      1 1 0.3 ${sigma} 1.122462
pair_coeff      1 1 0.3 1 1.122462
pair_coeff      1 2 0.3 ${sigma} 1.122462
pair_coeff      1 2 0.3 1 1.122462
pair_coeff      2 2 0.3 ${sigma} 1.122462
pair_coeff      2 2 0.3 1 1.122462

# ============================================================================
# BOUNDARY WALLS (not applied to rigid wall_atoms)
# ============================================================================

fix             walls_y particles wall/reflect yhi EDGE ylo EDGE
fix             walls_x particles wall/reflect xhi EDGE xlo EDGE

# ============================================================================
# INITIALIZATION
# ============================================================================

velocity        particles create ${T} 87654 dist gaussian
velocity        particles create 1 87654 dist gaussian
WARNING: Cannot count rigid body degrees-of-freedom before bodies are fully initialized (src/RIGID/fix_rigid_small.cpp:1132)
velocity        particles scale ${T}
velocity        particles scale 1
WARNING: Cannot count rigid body degrees-of-freedom before bodies are fully initialized (src/RIGID/fix_rigid_small.cpp:1132)
velocity        wall_atoms set 0.0 0.0 0.0

timestep        ${dt}
timestep        5e-05

fix             nve_p particles nve

# ============================================================================
# COMPUTES
# ============================================================================

compute         temp_p particles temp
compute         ke_p particles ke
compute         wall_com wall_atoms com

variable        wall_x equal c_wall_com[1]
variable        time_lj equal step*dt

region          left_side block -${L0} 0.0 -$(v_H/2) $(v_H/2) -0.5 0.5
region          left_side block -7.5 0.0 -$(v_H/2) $(v_H/2) -0.5 0.5
region          left_side block -7.5 0.0 -5 $(v_H/2) -0.5 0.5
region          left_side block -7.5 0.0 -5 5 -0.5 0.5
region          right_side block 0.0 ${L0} -$(v_H/2) $(v_H/2) -0.5 0.5
region          right_side block 0.0 7.5 -$(v_H/2) $(v_H/2) -0.5 0.5
region          right_side block 0.0 7.5 -5 $(v_H/2) -0.5 0.5
region          right_side block 0.0 7.5 -5 5 -0.5 0.5

group           left_p dynamic particles region left_side every 1000
dynamic group left_p defined
group           right_p dynamic particles region right_side every 1000
dynamic group right_p defined

variable        n_left equal count(left_p)
variable        n_right equal count(right_p)

# ============================================================================
# OUTPUT
# ============================================================================

thermo_style    custom step v_time_lj temp c_temp_p c_ke_p v_wall_x v_n_left v_n_right atoms

thermo          ${thermo_freq}
thermo          10000

# OVITO visualization: type 1 (blue gas), type 2 (wall line - will show as different color)
dump            traj all custom ${dump_freq} traj_final.lammpstrj                 id mol type x y z vx vy vz
dump            traj all custom 10000 traj_final.lammpstrj                 id mol type x y z vx vy vz

dump_modify     traj sort id

# High-frequency wall logging (every 0.05 time units)
fix             wall_log all print 1000                 "${time_lj} ${wall_x} ${n_left} ${n_right}"                 file wall_final.dat screen no                 title "# Time WallX NLeft NRight"

# ============================================================================
# RUN
# ============================================================================

print           "=========================================="
==========================================
print           "FINAL CONFIGURATION (matching C code):"
FINAL CONFIGURATION (matching C code):
print           "  Box: L0 = ${L0} (smaller for freq~0.06)"
  Box: L0 = 7.5 (smaller for freq~0.06)
print           "  Particles: $(count(particles))"
  Particles: 100
print           "  Wall: $(count(wall_atoms)) atoms in line"
  Wall: 20 atoms in line
print           "  Wall mass: ${M_total} (lighter for freq~0.06)"
  Wall mass: 20 (lighter for freq~0.06)
print           "  T = ${T}, dt = ${dt}"
  T = 1, dt = 5e-05
print           "  Target frequency: ~0.06 Hz"
  Target frequency: ~0.06 Hz
print           "=========================================="
==========================================

print           "Phase 1: Equilibration..."
Phase 1: Equilibration...
fix             hold wall_atoms setforce 0.0 NULL NULL
run             ${hold_steps}
run             100000
Generated 0 of 1 mixed pair_coeff terms from geometric mixing rule
WARNING: Should not use reflecting walls with rigid bodies (src/fix_wall_reflect.cpp:182)
WARNING: Should not use reflecting walls with rigid bodies (src/fix_wall_reflect.cpp:182)
Neighbor list info ...
  update: every = 1 steps, delay = 0 steps, check = yes
  max neighbors/atom: 2000, page size: 100000
  master list distance cutoff = 1.622462
  ghost atom cutoff = 6
  binsize = 0.811231, bins = 19 13 2
  1 neighbor lists, perpetual/occasional/extra = 1 0 0
  (1) pair lj/cut, perpetual
      attributes: half, newton on
      pair build: half/bin/newton
      stencil: half/bin/2d
      bin: standard
Per MPI rank memory allocation (min/avg/max) = 10.9 | 10.9 | 10.9 Mbytes
   Step       v_time_lj         Temp         c_temp_p        c_ke_p        v_wall_x       v_n_left      v_n_right       Atoms   
         0   0              0.98507463     1              0.825          0              63             37                   120 
     10000   0.5            1.4388171      1.4606173      1.2050093      2.3377878e-05  57             34                   120 
     20000   1              1.4465956      1.4685137      1.2115238      4.6755755e-05  56             32                   120 
     30000   1.5            1.550893       1.5743913      1.2988729      7.0133633e-05  54             35                   120 
     40000   2              1.4610224      1.4831591      1.2236062      9.351151e-05   54             34                   120 
     50000   2.5            1.4601373      1.4822606      1.222865       0.00011688939  54             34                   120 
     60000   3              1.4947347      1.5173822      1.2518403      0.00014026727  54             33                   120 
     70000   3.5            1.5231149      1.5461924      1.2756088      0.00016364514  51             35                   120 
     80000   4              1.4554821      1.4775348      1.2189662      0.00018702302  54             32                   120 
     90000   4.5            1.519322       1.542342       1.2724321      0.0002104009   52             33                   120 
    100000   5              1.5418258      1.5651868      1.2912791      0.00023377878  53             33                   120 
Loop time of 0.317091 on 1 procs for 100000 steps with 120 atoms

Performance: 1362384.931 tau/day, 315366.882 timesteps/s, 37.844 Matom-step/s
99.3% CPU use with 1 MPI tasks x no OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 0.10603    | 0.10603    | 0.10603    |   0.0 | 33.44
Bond    | 0.0023572  | 0.0023572  | 0.0023572  |   0.0 |  0.74
Neigh   | 0.00082187 | 0.00082187 | 0.00082187 |   0.0 |  0.26
Comm    | 0.0050169  | 0.0050169  | 0.0050169  |   0.0 |  1.58
Output  | 0.0012549  | 0.0012549  | 0.0012549  |   0.0 |  0.40
Modify  | 0.18256    | 0.18256    | 0.18256    |   0.0 | 57.57
Other   |            | 0.01905    |            |       |  6.01

Nlocal:            120 ave         120 max         120 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:              0 ave           0 max           0 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:            311 ave         311 max         311 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 311
Ave neighs/atom = 2.5916667
Ave special neighs/atom = 0
Neighbor list builds = 73
Dangerous builds = 0
unfix           hold

print           "Phase 2: Free oscillation (300 time units)..."
Phase 2: Free oscillation (300 time units)...
run             ${run_steps}
run             6000000
Generated 0 of 1 mixed pair_coeff terms from geometric mixing rule
WARNING: Should not use reflecting walls with rigid bodies (src/fix_wall_reflect.cpp:182)
WARNING: Should not use reflecting walls with rigid bodies (src/fix_wall_reflect.cpp:182)
Per MPI rank memory allocation (min/avg/max) = 12.17 | 12.17 | 12.17 Mbytes
   Step       v_time_lj         Temp         c_temp_p        c_ke_p        v_wall_x       v_n_left      v_n_right       Atoms   
    100000   5              1.5418258      1.5651868      1.2912791      0.00023377878  53             33                   120 
ERROR on proc 0: Rigid body atoms 106 110 missing on proc 0 at step 104456 (src/RIGID/fix_rigid_small.cpp:3482)
