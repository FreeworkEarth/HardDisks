# LAMMPS: Speed of Sound Experiment - Paper Configuration
# Exactly 50 particles left + 50 particles right
# Run for 200-300 time units

units           lj
dimension       2
atom_style      atomic
atom_modify     map yes
boundary        f f p

neighbor        0.3 bin
neigh_modify    delay 0 every 1 check yes

# ============================================================================
# PARAMETERS (matching paper setup)
# ============================================================================

variable        L0 equal 10.0           # Half box width
variable        H equal 10.0            # Box height
variable        N_per_side equal 50     # Exactly 50 particles per side
variable        T equal 0.5             # Temperature
variable        dt equal 0.0001         # Timestep

variable        pmass equal 1.0
variable        wmass equal 20.0        # Wall mass

# Run for 300 time units total
variable        hold_steps equal 50000   # Equilibration: 50k * 0.0001 = 5 time units
variable        run_steps equal 3000000  # Measurement: 3M * 0.0001 = 300 time units
variable        total_time equal (v_hold_steps+v_run_steps)*v_dt

variable        thermo_freq equal 1000
variable        dump_freq equal 5000     # Save every 0.5 time units

# ============================================================================
# BOX
# ============================================================================

region          box block -${L0} ${L0} -$(v_H/2) $(v_H/2) -0.5 0.5
create_box      2 box

# ============================================================================
# CREATE EXACTLY 50 PARTICLES ON EACH SIDE
# ============================================================================

# Create particles on lattice for controlled placement
# For 50 particles in region ~9x9: use lattice spacing ~1.27
lattice         sq 1.27

# Define regions for left and right chambers (excluding wall region)
region          left_chamber block -$(v_L0-0.5) -0.6 -$(v_H/2-0.5) $(v_H/2-0.5) -0.5 0.5
region          right_chamber block 0.6 $(v_L0-0.5) -$(v_H/2-0.5) $(v_H/2-0.5) -0.5 0.5

# Create particles
create_atoms    1 region left_chamber
create_atoms    1 region right_chamber

# Count and verify
variable        n_created equal count(all)
print           "Created ${n_created} particles total"

# If we don't have exactly 100, delete extras or warn
variable        n_target equal 100
if              "${n_created} > ${n_target}" then &
    "print 'WARNING: Created ${n_created} particles, need ${n_target}. Deleting extras...'" &
    "group extras id > ${n_target}" &
    "delete_atoms group extras"

mass            1 ${pmass}

# ============================================================================
# CREATE WALL
# ============================================================================

create_atoms    2 single 0.0 0.0 0.0
mass            2 ${wmass}

group           particles type 1
group           wall_atom type 2

print           "Final particle count: $(count(particles)) gas + $(count(wall_atom)) wall"

# ============================================================================
# POTENTIALS (soft WCA for stability)
# ============================================================================

pair_style      lj/cut 1.122462
pair_modify     shift yes

pair_coeff      1 1 0.5 1.0 1.122462
pair_coeff      1 2 0.5 1.0 1.122462
pair_coeff      2 2 0.0 1.0 1.122462

# ============================================================================
# BOUNDARY WALLS
# ============================================================================

fix             walls_y particles wall/reflect yhi EDGE ylo EDGE
fix             walls_x particles wall/reflect xhi EDGE xlo EDGE

# ============================================================================
# INITIALIZATION
# ============================================================================

velocity        particles create ${T} 4928459 dist gaussian
velocity        particles scale ${T}
velocity        wall_atom set 0.0 0.0 0.0

timestep        ${dt}

fix             wall_yz wall_atom setforce NULL 0.0 0.0
fix             nve_p particles nve
fix             nve_w wall_atom nve

# ============================================================================
# COMPUTES
# ============================================================================

compute         temp_p particles temp
compute         ke_p particles ke
compute         ke_w wall_atom ke

variable        wall_x equal x[$(count(particles)+1)]
variable        wall_vx equal vx[$(count(particles)+1)]
variable        ke_total equal c_ke_p+c_ke_w

region          left_side block -${L0} 0.0 -$(v_H/2) $(v_H/2) -0.5 0.5
region          right_side block 0.0 ${L0} -$(v_H/2) $(v_H/2) -0.5 0.5

group           left_p dynamic particles region left_side every 100
group           right_p dynamic particles region right_side every 100

variable        n_left equal count(left_p)
variable        n_right equal count(right_p)

# ============================================================================
# OUTPUT
# ============================================================================

thermo_style    custom step time temp c_temp_p c_ke_p c_ke_w v_ke_total &
                v_wall_x v_wall_vx v_n_left v_n_right atoms

thermo          ${thermo_freq}

dump            traj all custom ${dump_freq} traj_paper.lammpstrj &
                id type x y z vx vy vz

dump_modify     traj sort id

# High-frequency wall logging (every 0.02 time units)
fix             wall_log all print 200 &
                "$(step) $(time) ${wall_x} ${wall_vx} ${n_left} ${n_right}" &
                file wall_oscillation_paper.dat screen no &
                title "# Step Time WallX WallVx NLeft NRight"

# ============================================================================
# RUN
# ============================================================================

print           "================================================"
print           "Paper Configuration: 50+50 particles"
print           "Total simulation time: ${total_time} LJ units"
print           "  Equilibration: $(v_hold_steps*v_dt) time units"
print           "  Measurement: $(v_run_steps*v_dt) time units"
print           "================================================"

print           "Phase 1: Equilibration with wall fixed..."
fix             freeze_wall wall_atom setforce 0.0 NULL NULL
run             ${hold_steps}
unfix           freeze_wall

print           "Phase 2: Measuring oscillations for 300 time units..."
run             ${run_steps}

write_data      final_paper.data
print           "================================================"
print           "Simulation complete!"
print           "  Total time simulated: $(step*v_dt) LJ units"
print           "  Particles: $(count(particles))"
print           "  Left: ${n_left}, Right: ${n_right}"
print           "================================================"
